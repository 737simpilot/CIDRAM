Please put all your custom IPv4 CIDR signatures in this file.

All signatures follow the format: xxx.xxx.xxx.xxx/yy %Function% %Param%

Where:
- "xxx.xxx.xxx.xxx" represents the beginning of the CIDR block (the octets of the initial IP address in the block).
- "yy" represents the CIDR block size [1-32].
- %Function% instructs the script what to do with the signature (how the signature should be regarded).
- %Param% represents whatever additional information may be required by %Function%.

The signature files of this script MUST use unix-style linebreaks (%0A, or \n)! Using any other type/style of linebreak
(eg, Windows %0D%0A or \r\n linebreaks, Mac %0D or \r linebreaks, etc) WILL render all signatures unrecognisable to the
script! All signatures must both begin and end with a linebreak (%0A, or \n), in order to be recognised by the script!

Precise and correct CIDR notation is required, otherwise the script will NOT recognise the signatures. Additionally,
all the CIDR signatures of this script MUST begin with an IP address whose IP number can divide evenly into the block
division represented by its CIDR block size (eg, if you wanted to block all IPs from "10.128.0.0" to "11.127.255.255",
"10.128.0.0/8" would NOT be recognised by the script, but "10.128.0.0/9" and "11.0.0.0/9" used in conjunction, WOULD be
recognised by the script).

Anything in the signature files not recognised as a signature by the script will be IGNORED, therefore meaning that you
can safely put any non-signature data you want in the signature files without breaking them and without breaking the
script. Comments, such as the comment you're currently reading, in the signature files are acceptable, and no special
formatting is required for them.

The possible values of %Function% are as follows:
- Run
- Whitelist
- Deny

If "Run" is used, when the signature is triggered, the script will attempt to execute (using a `require_once`
statement) an external PHP script, specified by the %Param% value (the working directory should be the "/vault/"
directory of the script, and the scope of execution is within the IPv4 test function).

Example: 127.0.0.0/8 Run example.php

This can be useful if you wish to execute some specific PHP code for some specific IPs and/or CIDRs.

If "Whitelist" is used, when the signature is triggered, the script will reset all detections (if there's been any
detections) and break the test function. %Param% is ignored. This function is the equivalent of whitelisting a
particular IP or CIDR from being detected.

Example: 127.0.0.1/32 Whitelist

If "Deny" is used, when the signature is triggered, assuming no whitelist signature has been triggered for the given IP
address and/or given CIDR, access to the protected page will be denied. "Deny" is what you'll want to use to actually
block an IP address and/or CIDR range. When any signatures are triggered that make use of "Deny", the "Access Denied"
page of the script will be generated and the request to the protected page killed.

The %Param% value accepted by "Deny" will be parsed to the "Access Denied" page output, supplied to the client/user as
the cited reason for their access to the requested page being denied. It can be either a short and simple sentence,
explaining why you've chosen to block them (anything should suffice, even a simple "I don't want you on my website"),
or one of a small handful of shorthand words supplied by the script, that if used, will be replaced by the script with
a pre-prepared explanation of why the client/user has been blocked.

The pre-prepared explanations have i18n support and can be translated by the script based upon the language you specify
to the `lang` directive of the script configuration. Additionally, you can instruct the script to ignore "Deny"
signatures based upon their %Param% value (if they're using these shorthand words) via the directives specified by the
script configuration (each shorthand word has a corresponding directive to either process the corresponding signatures
or to ignore them). %Param% values that don't use these shorthand words, however, don't have i18n support and therefore
WON'T be translated by the script, and additionally, aren't directly controllable by the script configuration.

The available shorthand words are:
- Bogon
- Cloud
- Generic
- Spam

These available shorthand words (these examples assume that you've specified English as your desired language to the
`lang` directive of the script configuration) will be replaced by the script with:
- Bogon:    "Your access to this page was denied because your IP address is recognised as a bogon address, and
             connecting from bogons to this website isn't permitted by the website owner."
- Cloud:    "Your access to this page was denied because your IP address is recognised as belonging to a cloud service,
             and connecting to this website from cloud services isn't permitted by the website owner.
- Generic:  "Your access to this page was denied because your IP address belongs to a network listed on a blacklist
             used by this website."
- Spam:     "Your access to this page was denied because your IP address belongs to a network considered high-risk for
             spam."

Example 1: 127.0.0.0/8 Deny Bogon
Example 2: 127.0.0.0/8 Deny Cloud
Example 3: 127.0.0.0/8 Deny Generic
Example 4: 127.0.0.0/8 Deny Spam
Example 5: 127.0.0.0/8 Deny Your access to this page was denied because (of some other reason)...

More possible %Function% values and more possible %Param% values for "Deny" may, and likely will, be added at a future
date. For now, what has been documented is what is available, and at such a future time where new possible values are
added, they will be added, also, to the documentation.

Some additional useful resources:

- http://bgp.he.net/                            Get CIDRs from ASNs, determine ASN relationships, discover ASNs based
                                                upon network names, etc.

- https://www.stopforumspam.com/aggregate       Useful aggregation tool for IPv4 IPs.

- http://sitevet.com/db/asn/AS%Num%             Useful for checking rankings/cleanliness/health/trust of ASNs.

- https://radar.qrator.net/as%Num%              Another useful tool for checking the various activities of ASNs.

- http://www.ipdeny.com/ipblocks/               A fantastic and accurate service for generating country-wide
                                                signatures. They maintain lists of CIDRs based upon countries, so, if
                                                you want to use CIDRAM to block entire countries from accessing your
                                                website, you can use their lists to do this (you just need to append
                                                the "Deny %Reason%" to the end of list items; this can be done quickly
                                                and easily with most regex-capable text editors, such as Notepad++, for
                                                example; you can do this in Notepad++ by using Search and Replace,
                                                accessible with Ctrl+H; use "$" in "Find what" and " Deny Generic" in
                                                "Replace with").

IPDeny.com IPv4 country-based lists:
- http://www.ipdeny.com/ipblocks/
IPDeny.com IPv4 aggregated country-based lists (recommended over non-aggregated):
- http://www.ipdeny.com/ipblocks/data/aggregated/
IPDeny.com IPv6 country-based lists:
- http://www.ipdeny.com/ipv6/ipaddresses/blocks/
IPDeny.com IPv6 aggregated country-based lists (recommended over non-aggregated):
- http://www.ipdeny.com/ipv6/ipaddresses/aggregated/



> ADD YOUR CUSTOM SIGNATURES AFTER THIS LINE <



> ADD YOUR CUSTOM SIGNATURES BEFORE THIS LINE <



EOF